services:
  receiver:
    build:
      context: receiver
      dockerfile: Dockerfile
    volumes:
      - ./config/receiver:/app/config
      - ./config/logger:/app/logger
      - ./logs/receiver:/app/logs
    ports:
      - "8080:8080"
    depends_on:
      kafka:
        condition: service_healthy
  storage:
    build:
      context: storage
      dockerfile: Dockerfile
    volumes:
      - ./config/storage:/app/config
      - ./config/logger:/app/logger
      - ./logs/storage:/app/logs
    ports:
      - "8090:8090"
    depends_on:
      mysqldb:
        condition: service_healthy
      kafka:
        condition: service_healthy
  processing:
    build:
      context: processing
      dockerfile: Dockerfile
    volumes:
      - ./data/processing:/app/data
      - ./config/processing:/app/config
      - ./config/logger:/app/logger
      - ./logs/processing:/app/logs
    depends_on:
      - storage
    ports:
      - "8100:8100"
  analyzer:
    build:
      context: analyzer
      dockerfile: Dockerfile
    volumes:
      - ./config/analyzer:/app/config
      - ./config/logger:/app/logger
      - ./logs/analyzer:/app/logs
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8200:8200"
  dashboard:
    build:
      context: dashboard
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - analyzer
      - processing
  consistency_check:
    build:
      context: consistency_check
      dockerfile: Dockerfile
    volumes:
      - ./data/check:/app/data
      - ./config/check:/app/config
      - ./config/logger:/app/logger
      - ./logs/check:/app/logs
    ports:
      - "8300:8300"
    depends_on:
      - analyzer
      - processing
      - storage
  zookeeper:
    image: wurstmeister/zookeeper
    hostname: zookeeper
    volumes:
      - zookeeper_data:/data
  kafka:
    image: wurstmeister/kafka
    command: bash -c "rm -f /kafka/kafka-logs-kafka/meta.properties && start-kafka.sh"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: kafka # docker-machine ip
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/kafka:/kafka
    depends_on:
    - "zookeeper"
    healthcheck:
      test: ["CMD-SHELL", "echo 'test-message' | kafka-console-producer.sh --broker-list localhost:9092 --topic health-check-topic && kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic health-check-topic --from-beginning --max-messages 1 | grep 'test-message'"]
      interval: 15s
      timeout: 10s
      retries: 3
  mysqldb:
    image: mysql
    restart: always
    env_file: "./config/storage/prod.env"
    volumes:
      - ./data/database:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s

volumes:
  zookeeper_data:
